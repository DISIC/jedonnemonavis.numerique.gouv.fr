datasource db {
  provider = "postgresql"
  url      = env("POSTGRESQL_ADDON_URI")
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "linux-arm64-openssl-3.0.x", "darwin"]
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

generator zod {
  provider                  = "zod-prisma-types"
  addInputTypeValidation    = false
  addIncludeType            = false
  addSelectType             = false
  createRelationValuesTypes = true
  createPartialTypes        = true
}

enum UserRole {
  superadmin
  admin
  user
}

enum RequestMode {
  whitelist
  superuser
}

enum UserRequestStatus {
  pending
  accepted
  refused
}

enum RightAccessStatus {
  carrier_admin
  carrier_user
  removed
}

enum ProductStatus {
  published
  archived
}

enum AnswerKind {
  text
  checkbox
  radio
}

enum AnswerIntention {
  very_good
  good
  medium
  bad
  very_bad
  neutral
}

enum StatusExport {
  idle
  processing
  done
}

enum TypeExport {
  csv
  xls
}

enum Typebloc {
  paragraph
  heading_1
  heading_2
  heading_3
  input_text
  input_text_area
  mark_input
  smiley_input
  select
  radio
  checkbox
  new_page
  divider
  logic
}

enum NotificationFrequency {
  daily
  weekly
  monthly
}

enum TypeAction {
  services_list_view
  service_create
  service_update
  service_archive
  service_restore
  service_invite
  service_uninvite
  service_info_view
  service_stats_view
  service_reviews_view
  service_reviews_report_view
  service_new_reviews_view
  service_review_verbatim_view
  service_buttons_list_view
  service_button_create
  service_button_update
  service_apikeys_list_view
  service_apikeys_create
  service_apikeys_delete
  service_logs_view
  organisations_list_view
  organisation_create
  organisation_update
  organisation_invite
  organisation_uninvite
  organisation_apikeys_list_view
  organisation_apikeys_create
  user_signin
  user_signout
  api_call
}

// Next auth
model User {
  id                      Int                   @id @default(autoincrement())
  firstName               String?
  lastName                String?
  active                  Boolean               @default(false)
  xwiki_account           Boolean               @default(false)
  xwiki_username          String?
  email                   String                @unique
  password                String
  role                    UserRole              @default(user)
  UserOTPs                UserOTP[]
  UserValidationTokens    UserValidationToken[]
  UserRequests            UserRequest[]
  UserResetTokens         UserResetToken[]
  accessRights            AccessRight[]
  adminEntityRights       AdminEntityRight[]
  entities                Entity[]
  favorites               Favorite[]
  api_keys                ApiKey[]
  exports                 Export[]
  form_templates                   FormTemplate[]
  reviewViewLogs          ReviewViewLog[]
  notifications           Boolean               @default(false)
  notifications_frequency NotificationFrequency @default(daily)
  UserEvent               UserEvent[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model UserEvent {
  id         Int        @id @default(autoincrement())
  user       User?      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    Int?
  action     TypeAction
  metadata   Json
  product    Product?   @relation(fields: [product_id], references: [id])
  entity     Entity?    @relation(fields: [entity_id], references: [id])
  apiKey     ApiKey?    @relation(fields: [apiKey_id], references: [id])
  product_id Int?
  entity_id  Int?
  apiKey_id  Int?
  created_at DateTime   @default(now())

  @@index([user_id, action])
}

model UserRequest {
  id              Int               @id @default(autoincrement())
  user            User?             @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id         Int?              @unique
  user_email_copy String?
  reason          String
  mode            RequestMode       @default(whitelist)
  status          UserRequestStatus @default(pending)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model UserOTP {
  id              Int      @id @default(autoincrement())
  user            User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id         Int      @unique
  code            String   @unique
  expiration_date DateTime

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model UserValidationToken {
  id      Int    @id @default(autoincrement())
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id Int    @unique
  token   String @unique

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model UserInviteToken {
  id         Int    @id @default(autoincrement())
  user_email String
  token      String @unique

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model UserResetToken {
  id              Int      @id @default(autoincrement())
  user            User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id         Int      @unique
  user_email      String
  token           String   @unique
  expiration_date DateTime

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Entity {
  id                Int                @id @default(autoincrement())
  name              String             @unique
  name_formatted    String?
  acronym           String
  products          Product[]
  users             User[]
  adminEntityRights AdminEntityRight[]
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt
  api_keys          ApiKey[]
  UserEvent         UserEvent[]
}

model Button {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  xwiki_title String?
  isTest      Boolean? @default(false)
  product     Product? @relation(fields: [product_id], references: [id])
  product_id  Int

  reviews Review[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model ApiKey {
  id           Int         @id @default(autoincrement())
  key          String
  scope        UserRole
  user         User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id      Int
  product      Product?    @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id   Int?
  entity       Entity?     @relation(fields: [entity_id], references: [id], onDelete: Cascade)
  entity_id    Int?
  api_key_logs ApiKeyLog[]
  UserEvent    UserEvent[]
}

model ApiKeyLog {
  id         Int      @id @default(autoincrement())
  apikey     ApiKey   @relation(fields: [apikey_id], references: [id], onDelete: Cascade)
  apikey_id  Int
  url        String
  created_at DateTime @default(now())
}

model Product {
  id              Int           @id @default(autoincrement())
  title           String
  title_formatted String?
  status          ProductStatus @default(published)
  entity          Entity        @relation(fields: [entity_id], references: [id])
  entity_id       Int
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  urls            String[]
  volume          Int?
  xwiki_id        Int?          @unique
  buttons         Button[]
  accessRights    AccessRight[]
  favorites       Favorite[]
  reviews         Review[]
  isPublic        Boolean?
  isTop250        Boolean?
  hasBeenTop250   Boolean?
  api_keys        ApiKey[]
  Export          Export[]
  UserEvent       UserEvent[]
}

model AdminEntityRight {
  id                Int     @id @default(autoincrement())
  user              User?   @relation(fields: [user_email], references: [email])
  user_email        String?
  user_email_invite String?
  entity            Entity  @relation(fields: [entity_id], references: [id])
  entity_id         Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model AccessRight {
  id                Int     @id @default(autoincrement())
  user              User?   @relation(fields: [user_email], references: [email])
  user_email        String?
  user_email_invite String?
  product           Product @relation(fields: [product_id], references: [id])
  product_id        Int

  status RightAccessStatus @default(carrier_user)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model WhiteListedDomain {
  id     Int    @id @default(autoincrement())
  domain String @unique

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Favorite {
  user       User    @relation(fields: [user_id], references: [id])
  user_id    Int
  product    Product @relation(fields: [product_id], references: [id])
  product_id Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@id([user_id, product_id], name: "favorite_id")
}

model Review {
  id         Int     @default(autoincrement())
  form_id    Int
  product    Product @relation(fields: [product_id], references: [id])
  product_id Int
  button     Button  @relation(fields: [button_id], references: [id])
  button_id  Int
  xwiki_id   Int?
  user_id    String?

  reviewViewLogs ReviewViewLog[]

  answers Answer[]

  created_at DateTime @default(now())

  @@id([id, created_at])
  @@index([product_id, created_at])
  @@index([product_id, created_at, button_id])
}

model ReviewViewLog {
  id                Int      @id @default(autoincrement())
  user              User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id           Int
  review            Review   @relation(fields: [review_id, review_created_at], references: [id, created_at], onDelete: Cascade)
  review_id         Int
  review_created_at DateTime

  created_at DateTime @default(now())
}

model Answer {
  id                Int              @default(autoincrement())
  field_label       String
  field_code        String
  answer_item_id    Int
  answer_text       String
  intention         AnswerIntention?
  kind              AnswerKind
  review            Review           @relation(fields: [review_id, review_created_at], references: [id, created_at])
  review_id         Int
  review_created_at DateTime         @default(now())
  parent_answer     Answer?          @relation("ParentAnswer", fields: [parent_answer_id, created_at], references: [id, created_at])
  parent_answer_id  Int?
  child_answers     Answer[]         @relation("ParentAnswer")
  created_at        DateTime         @default(now())

  @@id([id, created_at])
  @@index([intention, field_code, review_id, review_created_at, created_at])
  @@index([review_id, review_created_at])
  @@index([review_id, review_created_at, field_code])
  @@index([parent_answer_id, created_at])
  @@index([review_id, field_code])
}

model Export {
  id         Int          @id @default(autoincrement())
  created_at DateTime     @default(now())
  user       User?        @relation(fields: [user_id], references: [id])
  user_id    Int?
  product    Product      @relation(fields: [product_id], references: [id])
  product_id Int
  params     String?
  status     StatusExport
  type       TypeExport   @default(csv)
  startDate  DateTime?
  endDate    DateTime?
  link       String?
}

model LimiterReporting {
  id             Int      @id @default(autoincrement())
  ip_id          String   @unique
  ip_adress      String
  product_id     Int
  button_id      Int
  total_attempts Int
  first_attempt  DateTime
  last_attempt   DateTime
}

model FormTemplate {
  id           Int            @id @default(autoincrement())
  created_at   DateTime       @default(now())
  updated_at   DateTime       @default(now())
  user         User           @relation(fields: [user_id], references: [id])
  user_id      Int
  title        String
  link         String?
  active       Boolean        @default(false)
  blocks       Block[]
  ReviewCustom ReviewCustom[]
}

model Block {
  id         Int            @id @default(autoincrement())
  created_at DateTime       @default(now())
  updated_at DateTime       @default(now())
  form       FormTemplate           @relation(fields: [form_id], references: [id])
  form_id    Int
  position   Int
  type_bloc  Typebloc
  label      String?
  value      String?
  content    String?
  options    OptionsBlock[]
}

model OptionsBlock {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  label      String?
  value      String?
  content    String?
  block      Block    @relation(fields: [block_id], references: [id], onDelete: Cascade)
  block_id   Int
}

model ReviewCustom {
  id         Int            @id @default(autoincrement())
  form       FormTemplate           @relation(fields: [form_id], references: [id])
  form_id    Int
  created_at DateTime
  updated_at DateTime
  answers    AnswerCustom[]
}

model AnswerCustom {
  id         Int          @id @default(autoincrement())
  review     ReviewCustom @relation(fields: [review_id], references: [id])
  review_id  Int
  block_id   Int
  created_at DateTime
  updated_at DateTime
  content    String
}
